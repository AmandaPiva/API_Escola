CREATE DATABASE ESCOLA;
GO 
USE ESCOLA;

GO

--TABELA PROFESSOR
CREATE TABLE ESC_PROFESSOR(
	PRO_IN_RF INT NOT NULL IDENTITY CONSTRAINT ESC_PK_PROFESSOR PRIMARY KEY,
	PRO_ST_NOME VARCHAR(50) NOT NULL,
	PRO_CH_CPF CHAR(14) NOT NULL CONSTRAINT PRO_CK_CH_CPF CHECK (PRO_CH_CPF LIKE
		'[0-9][0-9][0-9][.][0-9][0-9][0-9][.][0-9][0-9][0-9][-][0-9][0-9]')
			CONSTRAINT PRO_UK_CH_CPF UNIQUE,

	PRO_DT_NASC DATE NOT NULL CONSTRAINT ESC_DF_PRO_NASC DEFAULT GETDATE(), 
	PRO_ST_ESPECIALIDADE VARCHAR(50) 
);

--TABELA ALUNO
CREATE TABLE ESC_ALUNO(
	ALU_IN_RA INT NOT NULL IDENTITY CONSTRAINT ESC_PK_ALUNO PRIMARY KEY,
	ALU_ST_NOME VARCHAR(50) NOT NULL,
	ALU_CH_CPF CHAR(14) NOT NULL CONSTRAINT ALU_CK_CH_CPF CHECK (ALU_CH_CPF LIKE 
	'[0-9][0-9][0-9][.][0-9][0-9][0-9][.][0-9][0-9][0-9][-][0-9][0-9]')
		CONSTRAINT ALU_UK_CH_CPF UNIQUE, 

	--CRIANDO FOREIN KEY
	PRO_IN_RF INT NULL CONSTRAINT ESC_FK_ALU_PRO FOREIGN KEY REFERENCES ESC_PROFESSOR (PRO_IN_RF),
	
	ALU_DT_NASC DATE NOT NULL CONSTRAINT ESC_DF_ALU_NASC DEFAULT GETDATE(),
);

/*
    PROCEDURE PARA INSERIR UM NOVO ALUNO 
*/
CREATE OR ALTER PROCEDURE SP_I_ESC_ALUNO

(@nome varchar(100), @cpf char(20))
AS

DECLARE @CPF_ALUNO int

SELECT @CPF_ALUNO = COUNT(*) FROM ESC_ALUNO WHERE ALU_CH_CPF = @cpf;

--VERIFICANDO SE JÁ EXISTE NO BANCO DE DADOS
IF(@CPF_ALUNO > 0)
	BEGIN 

	RAISERROR('O cpf já existe no BD', 15,1)
	RETURN
	END

--VERIFICANDO SE O CPF ESTÁ NO FORMATO CORRETO
IF(@cpf NOT LIKE '[0-9][0-9][0-9][.][0-9][0-9][0-9][.][0-9][0-9][0-9][-][0-9][0-9]')
	BEGIN
		RAISERROR('O cpf deve ser informato no formato 999.999.999-99', 15,1)
		RETURN 
		END

--VERIFICANDO SE O CPF ESTÁ NO FORMATO CORRETO
IF(@cpf NOT LIKE '[0-9][0-9][0-9][.][0-9][0-9][0-9][.][0-9][0-9][0-9][-][0-9][0-9]')
	BEGIN
		RAISERROR('O cpf deve ser informato no formato 999.999.999-99', 15,1)
		RETURN 
		END

--VERIFICANDO OS CAMPOS OBRIGATÓRIOS
IF(LEN(TRIM(@nome))=0)
	BEGIN
		RAISERROR('O campo nome do aluno é obrigatório', 15,1)
		RETURN
		END

--EXECUTANDO O INSERT
INSERT INTO ESC_ALUNO (ALU_ST_NOME, ALU_CH_CPF)
VALUES (@nome, @cpf)

GO --FIM DA PROCEDURE

--testando 
EXEC SP_I_ESC_ALUNO 'Rafael Matos', '516.492.728-49'
SELECT * FROM ESC_ALUNO

/*
  PROCEDURE PARA INSERIR UM NOVO PROFESSOR
*/

CREATE OR ALTER PROCEDURE SP_I_ESC_PROFESSOR

(@nome varchar(100), @cpf char(20), @especialidade varchar(100))
AS

DECLARE @CPF_PROFESSOR int

SELECT @CPF_PROFESSOR = COUNT(*) FROM ESC_PROFESSOR WHERE PRO_CH_CPF = @cpf;

--VERIFICANDO SE JÁ EXISTE NO BANCO DE DADOS
IF(@CPF_PROFESSOR > 0)
	BEGIN 

	RAISERROR('O cpf já existe no BD', 15,1)
	RETURN
	END

--VERIFICANDO SE O CPF ESTÁ NO FORMATO CORRETO
IF(@cpf NOT LIKE '[0-9][0-9][0-9][.][0-9][0-9][0-9][.][0-9][0-9][0-9][-][0-9][0-9]')
	BEGIN
		RAISERROR('O cpf deve ser informato no formato 999.999.999-99', 15,1)
		RETURN 
		END

--VERIFICANDO OS CAMPOS OBRIGATÓRIOS
IF(LEN(TRIM(@nome))=0)
	BEGIN
		RAISERROR('O campo nome do professor é obrigatório', 15,1)
		RETURN
		END

--VERIFICANDO OS CAMPOS OBRIGATÓRIOS
IF(LEN(TRIM(@especialidade))=0)
	BEGIN
		RAISERROR('O campo especialidade do professor é obrigatório', 15,1)
		RETURN
		END

--EXECUTANDO O INSERT
INSERT INTO ESC_PROFESSOR(PRO_ST_NOME, PRO_CH_CPF, PRO_ST_ESPECIALIDADE)
VALUES (@nome, @cpf, @especialidade);

GO --FIM DA PROCEDURE

EXEC SP_I_ESC_PROFESSOR '', '516.492.728-48', 'Banco de Dados';
SELECT * FROM ESC_PROFESSOR;

/*
    PROCEDURE PARA ALTERAR UM ALUNO
*/

--PRCEDURE UPDATE ALUNO
USE ESCOLA;
GO

CREATE PROCEDURE SP_U_ESC_ALUNO

@ra INT,
@nome VARCHAR(100),
@cpf VARCHAR(20)

AS
	DECLARE @ALUNO INT

--VERIFICANDO SE O RA EXISTE
--FAZENDO UM SELECT PARA ATRIBUIR QUANTOS RA EXISTEM
SELECT @ALUNO = COUNT(ALU_IN_RA) FROM ESC_ALUNO WHERE ALU_IN_RA = @ra

--SE O RA NÃO EXISTIR, APRESENTE A MENSAGEM DE ERRO
--SE EXISTIR, SERÁ EXCLUIDO
IF(@ALUNO < 1)
	BEGIN
		RAISERROR('O ra informado não existe', 15,1);
	RETURN
END
	BEGIN
	UPDATE ESC_ALUNO
	SET 
	ALU_ST_NOME = @nome,
	ALU_CH_CPF = @cpf,
	ALU_DT_NASC = GETDATE()
	WHERE ALU_IN_RA = @ra ;
END
RETURN
GO

EXEC SP_U_ESC_ALUNO 1, 'Alice Campos', '444.555.888-74'
SELECT * FROM ESC_ALUNO

--PROCEDURE UPDATE PROFESSOR
USE ESCOLA;
GO

CREATE PROCEDURE SP_UP_ESC_PROFE

@rf INT,
@nome VARCHAR(100),
@cpf VARCHAR(20),
@especialidade VARCHAR(50)

AS
DECLARE @PROFESSOR INT

--VERIFICANDO SE O RA EXISTE
--FAZENDO UM SELECT PARA ATRIBUIR QUANTOS RA EXISTEM
SELECT @PROFESSOR = COUNT(PRO_IN_RF) FROM ESC_PROFESSOR WHERE PRO_IN_RF = @rf

--SE O RA NÃO EXISTIR, APRESENTE A MENSAGEM DE ERRO
--SE EXISTIR, SERÁ EXCLUIDO
IF(@PROFESSOR < 1)
	BEGIN
		RAISERROR('O rf informado não existe', 15,1);
	RETURN
END
--VERIFICANDO SE O CPF ESTÁ NO FORMATO CORRETO
IF(@cpf NOT LIKE '[0-9][0-9][0-9][.][0-9][0-9][0-9][.][0-9][0-9][0-9][-][0-9][0-9]')
	BEGIN
		RAISERROR('O cpf deve ser informato no formato 999.999.999-99', 15,1)
	RETURN 
END

--VERIFICANDO OS CAMPOS OBRIGATÓRIOS
IF(LEN(TRIM(@nome))=0)
	BEGIN
		RAISERROR('O campo nome do professor é obrigatório', 15,1)
	RETURN
END

--VERIFICANDO OS CAMPOS OBRIGATÓRIOS
IF(LEN(TRIM(@especialidade))=0)
	BEGIN
		RAISERROR('O campo especialidade do professor é obrigatório', 15,1)
	RETURN
END
	BEGIN
	UPDATE ESC_PROFESSOR
	SET 
	PRO_ST_NOME = @nome,
	PRO_CH_CPF = @cpf,
	PRO_DT_NASC = GETDATE(),
	PRO_ST_ESPECIALIDADE = @especialidade

	WHERE PRO_IN_RF = @rf ;
END
RETURN
GO

EXEC SP_U_ESC_PROFESSOR 2, 'Wesley', '334.234.879-61', 'Administração'
SELECT * FROM ESC_PROFESSOR

/*
    PROCEDURE PARA EXCLUIR UM ALUNO PELO RA
*/

CREATE PROCEDURE SP_D_ESC_ALUNO

@ra int
AS
DECLARE @ALUNO INT

--VERIFICANDO SE O RA EXISTE
--FAZENDO UM SELECT PARA ATRIBUIR QUANTOS RA EXISTEM
SELECT @ALUNO = COUNT(ALU_IN_RA) FROM ESC_ALUNO WHERE ALU_IN_RA = @ra

--SE O RA NÃO EXISTIR, APRESENTE A MENSAGEM DE ERRO
--SE EXISTIR, SERÁ EXCLUIDO
IF(@ALUNO < 1)
	BEGIN
		RAISERROR('O ra informado não existe', 15,1);
	RETURN
END
	DELETE FROM ESC_ALUNO WHERE ALU_IN_RA = @ra;
RETURN
GO

--TESTES
SP_D_ESC_ALUNO 430; --NÃO EXISTE
SP_D_ESC_ALUNO 1; --EXISTE DEVE EXCLUIR

SELECT * FROM ESC_ALUNO;

/*
    PROCEDURE DE EXCLUIR PROFESSOR
*/

CREATE PROCEDURE SP_D_ESC_PROFESSOR

@rf int
AS
DECLARE @PROFESSOR INT

--VERIFICANDO SE O RF EXISTE
--FAZENDO UM SELECT PARA ATRIBUIR QUANTOS RF EXISTEM
SELECT @PROFESSOR = COUNT(PRO_IN_RF) FROM ESC_PROFESSOR WHERE PRO_IN_RF = @rf

--SE O RF NÃO EXISTIR, APRESENTE A MENSAGEM DE ERRO
--SE EXISTIR, SERÁ EXCLUIDO
IF(@PROFESSOR < 1)
	BEGIN
		RAISERROR('O rf informado não existe', 15,1);
	RETURN
END
	DELETE FROM ESC_PROFESSOR WHERE PRO_IN_RF = @rf;
RETURN
GO

--TESTES
SP_D_ESC_PROFESSOR 430; --NÃO EXISTE
SP_D_ESC_PROFESSOR 1; --EXISTE DEVE EXCLUIR

SELECT * FROM ESC_PROFESSOR;

/*
    PROCEDURE PARA LISTAR OS ALUNOS
*/

CREATE OR ALTER PROCEDURE SP_S_ESC_ALUNO
(@filtro VARCHAR(100)='')
AS
IF(LEN(TRIM(@filtro)) = 0)
	BEGIN
		SELECT 
		ALU_IN_RA AS 'AlunoRa',
		ALU_ST_NOME AS 'Nome',
		ALU_CH_CPF AS 'cpf'

		FROM
			ESC_ALUNO
		END	
ELSE
	BEGIN
		SELECT
			ALU_IN_RA AS 'AlunoRa',
			ALU_ST_NOME AS 'Nome',
			ALU_CH_CPF AS 'cpf'

		FROM
			ESC_ALUNO
		WHERE ALU_ST_NOME LIKE '%'+@filtro+'%' OR ALU_IN_RA LIKE '%'+@filtro+'%'
	END
	RETURN 
	GO

	--testando
	EXEC SP_S_ESC_ALUNO 'Rafael Matos';

    /*
        PROCEDURE DE LISTAR OS PROFESSORES
    */

    CREATE OR ALTER PROCEDURE SP_S_ESC_PROFESSOR
(@filtro VARCHAR(100)='')
AS
IF(LEN(TRIM(@filtro)) = 0)
	BEGIN
		SELECT 
		PRO_IN_RF AS 'ProfessorRf',
		PRO_ST_NOME AS 'Nome',
		PRO_CH_CPF AS 'cpf',
		PRO_ST_ESPECIALIDADE AS 'Especialidade'

		FROM
			ESC_PROFESSOR
		END	
ELSE
	BEGIN
		SELECT
			PRO_IN_RF AS 'ProfessorRf',
			PRO_ST_NOME AS 'Nome',
			PRO_CH_CPF AS 'cpf',
			PRO_ST_ESPECIALIDADE AS 'Especialidade'

		FROM
			ESC_PROFESSOR
		WHERE PRO_ST_NOME LIKE '%'+@filtro+'%' OR PRO_IN_RF LIKE '%'+@filtro+'%'
	END
	RETURN 
	GO

	--testando
	EXEC SP_S_ESC_PROFESSOR 'Roberta Carla';